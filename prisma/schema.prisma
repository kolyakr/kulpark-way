generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  password    String
  phoneNumber String
  image       String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Ticket    Ticket[]
  Payment   Payment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Train {
  id          String @id @default(cuid())
  name        String
  trainNumber String @unique
  type        String
  seats       Int

  routes Route[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Station {
  id   String  @id @default(cuid())
  name String  @unique
  city String
  code String?

  departures Route[] @relation("Departures")
  arrivals   Route[] @relation("Arrivals")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id            String   @id @default(cuid())
  trainId       String
  departureId   String
  arrivalId     String
  departureTime DateTime
  arrivalTime   DateTime
  duration      Int

  train     Train   @relation(fields: [trainId], references: [id], onDelete: Cascade)
  departure Station @relation(fields: [departureId], references: [id], onDelete: Cascade, name: "Departures")
  arrival   Station @relation(fields: [arrivalId], references: [id], onDelete: Cascade, name: "Arrivals")

  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id      String @id @default(cuid())
  userId  String
  routeId String
  seat    String
  price   Float
  status  String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model Payment {
  id            String @id @default(cuid())
  userId        String
  ticketId      String
  amount        Float
  status        String
  paymentMethod String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
